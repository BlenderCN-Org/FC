** NOTE: This project is now defunkt... there are some good bits in here but be aware that it is no longer under active development **

FC Readme
=========

Welcome the FC, the development framework used by CurlyRocket.

First, some caveats:

FC currently builds on iOS, but will support more platforms as I feel the need to port
FC is immature but built upon some firm philosophies
	Lua hooks into every system... Most of the control code you write should be in Lua
	Performance isn't critical. Don't use FC to build the next great thing - use it for fast development of simple games
FC is meant for platform executables. It isn't designed for tools - that work is set aside for Python
FC is written in a mix of languages, bridged together with C interfaces. Currently FC consists of
	C++
	Objective C
	Lua
	Python

What does FC do ?
=================

FC is the backbone of all software written by CurlyRocket. It is aimed quite loosely at games development, but includes 
code which should be useful for general app development too. At the moment FC is one monolithic chunk of code.
Moving forward I expect the physical structure to be broken up a bit and more tightly focused on the thing it is doing
for you.

NOTE: All the rest needs re-writing... things have changed a lot since this was written.

FC currently consists of a few folders covering the following functionality:

* Categories

Useful categories which extend the use of built-in Foundation and AppKit types.

* Core

The real base of all FC functionality. Covers types, macros, protocols and error/log handling.

* Debug

Debugging objects to help development.
FCConnect - remote services that connect with FCConnect OSX tool.

* Graphics

Rendering subsystem, covering model and mesh formats, OpenGL state management, shader and texture handling etc.
Also contains UIViews focused at native iOS UI development.

* Lua

A game oriented multi-lua-threaded Lua system. The goal is to enable Lua to drive all of the higher level functionality
of FC. 

* Maths

C++ maths routines

* Physics

Abstraction layer for 2D and 3D physics. Currently wraps Box2D and when required, Bullet.

* Framework

Pretty much everything else I've written which could be handy to share. An actor system, analytics wrapper, Game Center
wrappers, resource management, ui management, XML data handler, crypto, device caps, persistent save data... etc.

------------------------------------------------------------------------------------------------------------------------

Build Instructions
==================

To build FC you need to look in the Build folder - this is where the XCode projects are stored. Once you open the one you
need the only you should need to set up are the header include paths for some external dependencies:

Lua
Box2D
Google Analytics

These can be found in the 'Header Search Paths' part of the Build Settings page. If you don't know how to do this you
probably shouldn't be trying to use FC in the first place 8). Once built you can link against FC in the normal way.

------------------------------------------------------------------------------------------------------------------------

Skeleton Project
================

One thing I need to do is create a skeleton 'hello world' project to show people what hooks FC needs into your code. Once
I do that I'll put some documentation about it here.

------------------------------------------------------------------------------------------------------------------------

Have fun - suggestions etc send to: link@curlyrocket.com
@fizzychicken
@curlyrocketltd
